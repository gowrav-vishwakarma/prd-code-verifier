# Example workflow for users to integrate PRD Code Verifier into their CI/CD pipeline
# This file should be placed in .github/workflows/ directory of the user's repository

name: PRD Code Verification

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      run_all_verifications:
        description: "Run all verifications (not just changed files)"
        required: false
        default: "false"
        type: boolean
      specific_verifications:
        description: "Specific verification names to run (comma-separated)"
        required: false
        type: string

jobs:
  verify-code:
    runs-on: ubuntu-latest

    steps:
      - name: PRD Code Verification
        uses: gowrav-vishwakarma/prd-code-verifier@main
        with:
          # Project configuration file (must exist in your repo)
          project_file: "prd-verification.json"

          # Repository configuration
          # If not specified, uses current repository for all
          documentation_repo: "https://github.com/your-org/your-docs-repo.git"
          documentation_branch: "main"

          frontend_repo: "https://github.com/your-org/your-frontend-repo.git"
          frontend_branch: "develop"

          backend_repo: "https://github.com/your-org/your-backend-repo.git"
          backend_branch: "main"

          # Verification configuration
          run_all_verifications: ${{ github.event.inputs.run_all_verifications || 'false' }}
          specific_verifications: ${{ github.event.inputs.specific_verifications || '' }}

          # AI configuration
          ai_provider: "openai" # or 'gemini', 'ollama', 'lm_studio'
          ai_model: "gpt-3.5-turbo"
          # ai_base_url: 'https://api.openai.com/v1'  # Optional for custom endpoints

          # Output configuration
          output_folder: "./reports"
          publish_results: "true"
          publish_path: "reports"

          # Git configuration
          base_commit: "HEAD~1"
          target_commit: "HEAD"

        env:
          # Required: Set your AI provider API key
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}  # If using Gemini
          # OLLAMA_BASE_URL: ${{ secrets.OLLAMA_BASE_URL }}  # If using Ollama
          # LM_STUDIO_BASE_URL: ${{ secrets.LM_STUDIO_BASE_URL }}  # If using LM Studio

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Check if results directory exists
            const resultsDir = './reports';
            if (!fs.existsSync(resultsDir)) {
              console.log('No results directory found');
              return;
            }

            // Find all report files
            const reportFiles = [];
            function findReports(dir) {
              const files = fs.readdirSync(dir);
              for (const file of files) {
                const filePath = path.join(dir, file);
                const stat = fs.statSync(filePath);
                if (stat.isDirectory()) {
                  findReports(filePath);
                } else if (file.endsWith('.md')) {
                  reportFiles.push(filePath);
                }
              }
            }

            findReports(resultsDir);

            if (reportFiles.length === 0) {
              console.log('No report files found');
              return;
            }

            // Create comment
            let comment = '## üîç PRD Code Verification Results\n\n';
            comment += `Found ${reportFiles.length} verification report(s):\n\n`;

            for (const reportFile of reportFiles) {
              const relativePath = path.relative('./reports', reportFile);
              const fileName = path.basename(reportFile);
              comment += `- [${fileName}](${relativePath})\n`;
            }

            comment += '\n---\n*Generated by PRD Code Verifier*';

            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
